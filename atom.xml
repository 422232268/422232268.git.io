<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随笔集</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-19T04:06:49.987Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tim wong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac使用小技巧</title>
    <link href="http://yoursite.com/2019/11/20/test/mac%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2019/11/20/test/mac%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2019-11-20T05:42:17.000Z</published>
    <updated>2020-10-19T04:06:49.987Z</updated>
    
    <content type="html"><![CDATA[<!-- * @Author: za-wangxuezhong * @Date: 2019-11-17 22:19:51 * @LastEditors: za-wangxuezhong * @LastEditTime: 2019-11-20 13:50:39 * @Description: file content --><h2 id="mac使用小技巧"><a href="#mac使用小技巧" class="headerlink" title="mac使用小技巧"></a>mac使用小技巧</h2><h3 id="更改终端用户名"><a href="#更改终端用户名" class="headerlink" title="更改终端用户名"></a>更改终端用户名</h3><ul><li><p>/etc/bashrc文件中的PS1=’\h:\W \u$ ‘，其中\h代表主机名，\u代表用户名<br>例如:</p></li><li><p>比如修改成：PS1=’abc:\W 123$ ‘ ， 终端显示如下:<a href="https://www.cnblogs.com/tdcqma/p/6714492.html">地址</a></p></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;!--
 * @Author: za-wangxuezhong
 * @Date: 2019-11-17 22:19:51
 * @LastEditors: za-wangxuezhong
 * @LastEditTime: 2019-11-20 13:50:39
 * @De</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2019/11/18/test/test/"/>
    <id>http://yoursite.com/2019/11/18/test/test/</id>
    <published>2019-11-18T05:29:22.000Z</published>
    <updated>2020-12-11T19:41:31.259Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><!-- * @Autor: za-wangxuezhong * @Date: 2020-10-19 15:05:51 * @LastEditors: za-wangxuezhong * @LastEditTime: 2020-12-12 03:41:28 * @Description: * @ToDo: * @JiraID: SOMPO---><h4 id="当使用Hook特性编写组件的时候-总能感觉到它的简洁和方便-当然-天下没有-免费的午餐-它牺牲了可读性并且存在内存泄漏风险-但这并不妨碍探索它的能力"><a href="#当使用Hook特性编写组件的时候-总能感觉到它的简洁和方便-当然-天下没有-免费的午餐-它牺牲了可读性并且存在内存泄漏风险-但这并不妨碍探索它的能力" class="headerlink" title="当使用Hook特性编写组件的时候,总能感觉到它的简洁和方便.当然,天下没有{免费的午餐},它牺牲了可读性并且存在内存泄漏风险,但这并不妨碍探索它的能力"></a>当使用Hook特性编写组件的时候,总能感觉到它的简洁和方便.当然,天下没有{免费的午餐},它牺牲了可读性并且存在内存泄漏风险,但这并不妨碍探索它的能力</h4><div id="flowchart-0" class="flow-chart"></div><blockquote class="pullquote mindmap mindmap-md"><ul><li><a href="https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html">Hexo 的思维导图插件</a><ul><li>前言</li><li>使用方法<ul><li>一</li><li>二</li><li>三<ul><li>四</li></ul></li></ul></li><li>太长不看</li><li>参考资料</li></ul></li></ul></blockquote><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始e=>end: 结束op=>operation: 我的操作cond=>condition: 确认？st->op->condcond(yes)->econd(no)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;!--
 * @Autor: za-wangxuezhong
 * @Date: 2020-10-19 15:05:51
 * @LastEdi</summary>
      
    
    
    
    <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>彻底搞懂ReactHooks的原理和实现</title>
    <link href="http://yoursite.com/2019/11/18/test/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82ReactHooks%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/11/18/test/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82ReactHooks%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-11-18T05:29:22.000Z</published>
    <updated>2020-12-11T13:30:33.596Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><h4 id="当使用Hook特性编写组件的时候-总能感觉到它的简洁和方便-当然-天下没有-免费的午餐-它牺牲了可读性并且存在内存泄漏风险-但这并不妨碍探索它的能力"><a href="#当使用Hook特性编写组件的时候-总能感觉到它的简洁和方便-当然-天下没有-免费的午餐-它牺牲了可读性并且存在内存泄漏风险-但这并不妨碍探索它的能力" class="headerlink" title="当使用Hook特性编写组件的时候,总能感觉到它的简洁和方便.当然,天下没有{免费的午餐},它牺牲了可读性并且存在内存泄漏风险,但这并不妨碍探索它的能力"></a>当使用Hook特性编写组件的时候,总能感觉到它的简洁和方便.当然,天下没有{免费的午餐},它牺牲了可读性并且存在内存泄漏风险,但这并不妨碍探索它的能力</h4><h4 id="在正式开始前-我打算先提出几个问题-这些问题会在源码实现的过程中-逐步解决"><a href="#在正式开始前-我打算先提出几个问题-这些问题会在源码实现的过程中-逐步解决" class="headerlink" title="在正式开始前,我打算先提出几个问题,这些问题会在源码实现的过程中,逐步解决"></a>在正式开始前,我打算先提出几个问题,这些问题会在源码实现的过程中,逐步解决</h4><ul><li>useState 的实现原理</li><li>为什么不能在循环、判断内部使用Hook</li><li>useEffect的实现原理</li><li>useEffect的应用场景</li><li><code>Class</code> vs <code>Hooks</code></li></ul><h4 id="以上代码均由TypeScript来实现-文中全部dome均在github中实现"><a href="#以上代码均由TypeScript来实现-文中全部dome均在github中实现" class="headerlink" title="以上代码均由TypeScript来实现,文中全部dome均在github中实现"></a>以上代码均由TypeScript来实现,文中全部dome均在<a href="gist.github.com/dongyuanxin/">github</a>中实现</h4><details>  <summary><mark><font color=darkred>点击查看详细内容</font></mark></summary>  <p> - 测试 测试测试</p>  <pre><code>for i in a:    print(i)  </code></pre></details>### useState的实现原理<ul><li>当调用useState的时候,回返回形如<code>(变量,函数)</code>的一个组件.并且state的初始值就是外部调用useState的时候传入的参数</li><li>理清楚了传参和返回值,再来看下useState还做了些什么.正如下面的代码所示,当点击按钮的时候,执行setNum.状态num被更新,并且UI识图更新.显然,useState翻的用于更改状态的函数,自动调用了<code>render</code> 方法来触发视图更新</li></ul><pre><code class="React">function App() {  const [num, setNum] = useState &lt; number &gt; 0;  return (    &lt;div&gt;      &lt;div&gt;num: {num}&lt;/div&gt;      &lt;button onClick={() =&gt; setNum(num + 1)}&gt;加 1&lt;/button&gt;    &lt;/div&gt;  );}</code></pre><ul><li>有了上面的实验,借助一下闭包,封装一个setState如下:</li></ul><pre><code class="React">function render() {  ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));}let state: any;function useState&lt;T&gt;(initialState: T): [T, (newState: T) =&gt; void] {  state = state || initialState;  function setState(newState: T) {    state = newState;    render();  }  return [state, setState];}render(); // 首次渲染</code></pre><ul><li>这是一个简易能用的useState雏形,它也解决了文章开始提到的{useState的实现原理}这个问题,但如果在函数内生命多个state,在当前代码中,只有第一个state 是生效的(请看state=state||initialState)</li></ul><h3 id="为什么不能在循环、判断内部使用Hook"><a href="#为什么不能在循环、判断内部使用Hook" class="headerlink" title="为什么不能在循环、判断内部使用Hook"></a>为什么不能在循环、判断内部使用Hook</h3><ul><li>先不要考虑题目提及的问题.思路还是回到如何让useState支持多个state.React Hook 看起来非常 Magic 的实现，本质上还是通过 Array 来实现的</li><li>前面 useState 的简单实现里，初始的状态是保存在一个全局变量中的。以此类推，多个状态，应该是保存在一个专门的全局容器中。这个容器，就是一个朴实无华的 Array 对象。具体过程如下：</li></ul><ol><li>第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 cursor 增加 1。</li><li>更新 state，触发再次渲染的时候。cursor 被重置为 0。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新。</li></ol><ul><li>请看下面这张图，每次使用 useState，都会向 STATE 容器中添加新的状态。</li></ul><pre><code class="React">import React from &quot;react&quot;;import ReactDOM from &quot;react-dom&quot;;const states: any[] = [];let cursor: number = 0;function useState&lt;T&gt;(initialState: T): [T, (newState: T) =&gt; void] {  const currenCursor = cursor;  states[currenCursor] = states[currenCursor] || initialState; // 检查是否渲染过  function setState(newState: T) {    states[currenCursor] = newState;    render();  }  ++cursor; // update: cursor  return [states[currenCursor], setState];}function App() {  const [num, setNum] = useState &lt; number &gt; 0;  const [num2, setNum2] = useState &lt; number &gt; 1;  return (    &lt;div&gt;      &lt;div&gt;num: {num}&lt;/div&gt;      &lt;div&gt;        &lt;button onClick={() =&gt; setNum(num + 1)}&gt;加 1&lt;/button&gt;        &lt;button onClick={() =&gt; setNum(num - 1)}&gt;减 1&lt;/button&gt;      &lt;/div&gt;      &lt;hr /&gt;      &lt;div&gt;num2: {num2}&lt;/div&gt;      &lt;div&gt;        &lt;button onClick={() =&gt; setNum2(num2 * 2)}&gt;扩大一倍&lt;/button&gt;        &lt;button onClick={() =&gt; setNum2(num2 / 2)}&gt;缩小一倍&lt;/button&gt;      &lt;/div&gt;    &lt;/div&gt;  );}function render() {  ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));  cursor = 0; // 重置cursor}render(); // 首次渲染</code></pre><ul><li>此时，如果想在循环、判断等不在函数组件顶部的地方使用 Hook，如下所示：</li></ul><pre><code class="React">let tag = true;function App() {  const [num, setNum] = useState &lt; number &gt; 0;  // 只有初次渲染，才执行  if (tag) {    const [unusedNum] = useState &lt; number &gt; 1;    tag = false;  }  const [num2, setNum2] = useState &lt; number &gt; 2;  return (    &lt;div&gt;      &lt;div&gt;num: {num}&lt;/div&gt;      &lt;div&gt;        &lt;button onClick={() =&gt; setNum(num + 1)}&gt;加 1&lt;/button&gt;        &lt;button onClick={() =&gt; setNum(num - 1)}&gt;减 1&lt;/button&gt;      &lt;/div&gt;      &lt;hr /&gt;      &lt;div&gt;num2: {num2}&lt;/div&gt;      &lt;div&gt;        &lt;button onClick={() =&gt; setNum2(num2 * 2)}&gt;扩大一倍&lt;/button&gt;        &lt;button onClick={() =&gt; setNum2(num2 / 2)}&gt;缩小一倍&lt;/button&gt;      &lt;/div&gt;    &lt;/div&gt;  );}</code></pre><ul><li>由于在条件判断的逻辑中，重置了tag=false，因此此后的渲染不会再进入条件判断语句。看起来好像没有问题？但是，由于 useState 是基于 Array+Cursor 来实现的，第一次渲染时候，state 和 cursor 的对应关系如下表</li></ul><table><thead><tr><th>变量名</th><th>Cursor</th></tr></thead><tbody><tr><td>num</td><td>0</td></tr><tr><td>unusedNum</td><td>1</td></tr><tr><td>num2</td><td>2</td></tr></tbody></table><ul><li>当点击事件触发再次渲染，并不会进入条件判断中的 useState。所以，cursor=2 的时候对应的变量是 num2。而其实 num2 对应的 cursor 应该是 3。就会导致setNum2并不起作用</li><li>当点击事件触发再次渲染，并不会进入条件判断中的 useState。所以，cursor=2 的时候对应的变量是 num2。而其实 num2 对应的 cursor 应该是 3。就会导致setNum2并不起作用</li></ul><h3 id="useEffect-的实现原理"><a href="#useEffect-的实现原理" class="headerlink" title="useEffect 的实现原理"></a>useEffect 的实现原理</h3><ul><li>在探索 useEffect 原理的时候，一直被一个问题困扰：useEffect 作用和用途是什么？当然，用于函数的副作用这句话谁都会讲。举个例子吧</li></ul><pre><code class="React">function App() {  const [num, setNum] = useState(0);  useEffect(() =&gt; {    // 模拟异步请求后端数据    setTimeout(() =&gt; {      setNum(num + 1);    }, 1000);  }, []);  return &lt;div&gt;{!num ? &quot;请求后端数据...&quot; : `后端数据是 ${num}`}&lt;/div&gt;;}</code></pre><ul><li>这段代码，虽然这样组织可读性更高，毕竟可以将这个请求理解为函数的副作用。但这并不是必要的。完全可以不使用useEffect，直接使用setTimeout，并且它的回调函数中更新函数组件的 state</li><li>在阅读A Complete Guide to useEffect和构建你自己的 Hooks之后，我才理解 useEffect 的存在的必要性和意义</li><li>在 useEffect 的第二个参数中，我们可以指定一个数组，如果下次渲染时，数组中的元素没变，那么就不会触发这个副作用（可以类比 Class 类的关于 nextprops 和 prevProps 的生命周期）。好处显然易见，相比于直接裸写在函数组件顶层，useEffect 能根据需要，避免多余的 render</li><li>下面是一个不包括销毁副作用功能的 useEffect 的 TypeScript 实现</li></ul><pre><code class="React">// 还是利用 Array + Cursor的思路const allDeps: any[][] = [];let effectCursor: number = 0;function useEffect(callback: () =&gt; void, deps: any[]) {  if (!allDeps[effectCursor]) {    // 初次渲染：赋值 + 调用回调函数    allDeps[effectCursor] = deps;    ++effectCursor;    callback();    return;  }  const currenEffectCursor = effectCursor;  const rawDeps = allDeps[currenEffectCursor];  // 检测依赖项是否发生变化，发生变化需要重新render  const isChanged = rawDeps.some(    (dep: any, index: number) =&gt; dep !== deps[index]  );  if (isChanged) {    callback();  }  ++effectCursor;}function render() {  ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));  effectCursor = 0; // 注意将 effectCursor 重置为0}</code></pre><ul><li>对于 useEffect 的实现，配合下面案例的使用会更容易理解。当然，你也可以在这个 useEffect 中发起异步请求，并在接受数据后，调用 state 的更新函数，不会发生爆栈的情况</li></ul><pre><code class="React">function App() {  const [num, setNum] = useState &lt; number &gt; 0;  const [num2] = useState &lt; number &gt; 1;  // 多次触发  // 每次点击按钮，都会触发 setNum 函数  // 副作用检测到 num 变化，会自动调用回调函数  useEffect(() =&gt; {    console.log(&quot;num update: &quot;, num);  }, [num]);  // 仅第一次触发  // 只会在compoentDidMount时，触发一次  // 副作用函数不会多次执行  useEffect(() =&gt; {    console.log(&quot;num2 update: &quot;, num2);  }, [num2]);  return (    &lt;div&gt;      &lt;div&gt;num: {num}&lt;/div&gt;      &lt;div&gt;        &lt;button onClick={() =&gt; setNum(num + 1)}&gt;加 1&lt;/button&gt;        &lt;button onClick={() =&gt; setNum(num - 1)}&gt;减 1&lt;/button&gt;      &lt;/div&gt;    &lt;/div&gt;  );}</code></pre><ul><li>useEffect 第一个回调函数可以返回一个用于销毁副作用的函数，相当于 Class 组件的 unmount 生命周期。这里为了方便说明，没有进行实现</li><li>在这一小节中，尝试解答了 「🤔️ useEffect 的实现原理」和 「🤔️ useEffect 的应用场景」这两个问题</li></ul><h3 id="Class-VS-Hooks"><a href="#Class-VS-Hooks" class="headerlink" title="Class VS Hooks"></a>Class VS Hooks</h3><ul><li>虽然 Hooks 看起来更酷炫，更简洁。但是在实际开发中我更倾向于使用 Class 来声明组件。两种方法的对比如下</li></ul><table><thead><tr><th>Class</th><th>Hooks</th></tr></thead><tbody><tr><td>代码逻辑清晰（构造函数、componentDidMount 等）</td><td>需要配合变量名和注释</td></tr><tr><td>不容易内存泄漏</td><td>容易发生内存泄漏</td></tr></tbody></table><ul><li>总的来说，Hooks 对代码编写的要求较高，在没有有效机制保证代码可读性、规避风险的情况下，Class 依然是我的首选。关于内存泄漏，下面是一个例子（目前还没找到方法规避这种向全局传递状态更新函数的做法</li></ul><pre><code class="React">import React, { useState } from &quot;react&quot;;import ReactDOM from &quot;react-dom&quot;;let func: any;setInterval(() =&gt; {  typeof func === &quot;function&quot; &amp;&amp; func(Date.now());  console.log(&quot;interval&quot;);}, 1000);function App() {  const [num, setNum] = useState &lt; number &gt; 0;  if (typeof func !== &quot;function&quot;) {    func = setNum;  }  return &lt;div&gt;{num}&lt;/div&gt;;}function render() {  ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));}render();</code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://xin-tan.com/passages/2019-10-21-react-hooks/#%E6%91%98%E8%A6%81">ReactHooks的原理和实现</a><br><a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/">useEffect 完整指南</a><br><a href="https://github.com/brickspert/blog/issues/26">React Hooks 原理</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;h4 id=&quot;当使用Hook特性编写组件的时候-总能感觉到它的简洁和方便-当然-天下没有-免费的午餐-它牺牲了可读性并且存在内存泄漏风险-但这并</summary>
      
    
    
    
    <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>第四篇笔记</title>
    <link href="http://yoursite.com/2019/11/18/test/%E5%9B%BE%E6%A0%87%E5%AD%A6%E4%B9%A0%E4%BA%8C%20copy%202/"/>
    <id>http://yoursite.com/2019/11/18/test/%E5%9B%BE%E6%A0%87%E5%AD%A6%E4%B9%A0%E4%BA%8C%20copy%202/</id>
    <published>2019-11-17T18:11:57.000Z</published>
    <updated>2020-10-19T04:06:49.988Z</updated>
    
    <content type="html"><![CDATA[<!-- * @Author: za-wangxuezhong * @Date: 2019-11-17 22:19:51 * @LastEditors: za-wangxuezhong * @LastEditTime: 2019-11-20 13:01:34 * @Description: file content --><h2 id="流程图-基本语法"><a href="#流程图-基本语法" class="headerlink" title="流程图-基本语法"></a>流程图-基本语法</h2><h3 id="这声明了一个从上到下（TD或TB）定向的图形"><a href="#这声明了一个从上到下（TD或TB）定向的图形" class="headerlink" title="这声明了一个从上到下（TD或TB）定向的图形"></a>这声明了一个从上到下（TD或TB）定向的图形</h3><pre><code class="bash">graph TD    Start --&gt; Stop</code></pre><pre><code class="mermaid">graph TD    Start --&gt; Stop</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;!--
 * @Author: za-wangxuezhong
 * @Date: 2019-11-17 22:19:51
 * @LastEditors: za-wangxuezhong
 * @LastEditTime: 2019-11-20 13:01:34
 * @De</summary>
      
    
    
    
    <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
    <category term="frist" scheme="http://yoursite.com/tags/frist/"/>
    
  </entry>
  
  <entry>
    <title>类图</title>
    <link href="http://yoursite.com/2019/11/18/test/%E7%B1%BB%E5%9B%BE/"/>
    <id>http://yoursite.com/2019/11/18/test/%E7%B1%BB%E5%9B%BE/</id>
    <published>2019-11-17T18:11:57.000Z</published>
    <updated>2020-10-19T04:06:49.988Z</updated>
    
    <content type="html"><![CDATA[<!-- * @Author: za-wangxuezhong * @Date: 2019-11-17 22:19:51 * @LastEditors: za-wangxuezhong * @LastEditTime: 2019-11-21 09:20:26 * @Description: file content --><h2 id="类图-基本语法"><a href="#类图-基本语法" class="headerlink" title="类图-基本语法"></a>类图-基本语法</h2><blockquote><p>“在软件工程中，统一建模语言（UML）中的类图是一种静态结构图，它通过显示系统的类，其属性，操作（或方法）以及对象之间的关系来描述系统的结构。 ”。维基百科</p></blockquote><p>类图是面向对象建模的主要构建块。它用于应用程序结构的一般概念建模，以及用于将模型转换为编程代码的详细建模。类图也可以用于数据建模。类图中的类表示主要元素，应用程序中的交互以及要编程的类。</p><h3 id="美人鱼可以渲染类图"><a href="#美人鱼可以渲染类图" class="headerlink" title="美人鱼可以渲染类图"></a>美人鱼可以渲染类图</h3><pre><code class="bash"> classDiagram      Animal &lt;|-- Duck      Animal &lt;|-- Fish      Animal &lt;|-- Zebra      Animal : +int age      Animal : +String gender      Animal: +isMammal()      Animal: +mate()      class Duck{          +String beakColor          +swim()          +quack()      }      class Fish{          -int sizeInFeet          -canEat()      }      class Zebra{          +bool is_wild          +run()      }</code></pre><pre class="mermaid"> classDiagram      Animal <|-- Duck      Animal <|-- Fish      Animal <|-- Zebra      Animal : +int age      Animal : +String gender      Animal: +isMammal()      Animal: +mate()      class Duck{          +String beakColor          +swim()          +quack()      }      class Fish{          -int sizeInFeet          -canEat()      }      class Zebra{          +bool is_wild          +run()      }</pre><h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><pre><code class="bash">pie    &quot;Dogs&quot; : 386    &quot;Cats&quot; : 85    &quot;Rats&quot; : 15</code></pre><pre class="mermaid">pie    "Dogs" : 386    "Cats" : 85    "Rats" : 15</pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;!--
 * @Author: za-wangxuezhong
 * @Date: 2019-11-17 22:19:51
 * @LastEditors: za-wangxuezhong
 * @LastEditTime: 2019-11-21 09:20:26
 * @De</summary>
      
    
    
    
    <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
    <category term="frist" scheme="http://yoursite.com/tags/frist/"/>
    
  </entry>
  
  <entry>
    <title>顺序图</title>
    <link href="http://yoursite.com/2019/11/18/test/%E9%A1%BA%E5%BA%8F%E5%9B%BE/"/>
    <id>http://yoursite.com/2019/11/18/test/%E9%A1%BA%E5%BA%8F%E5%9B%BE/</id>
    <published>2019-11-17T18:11:57.000Z</published>
    <updated>2020-10-19T04:06:49.989Z</updated>
    
    <content type="html"><![CDATA[<!-- * @Author: za-wangxuezhong * @Date: 2019-11-17 22:19:51 * @LastEditors: za-wangxuezhong * @LastEditTime: 2019-11-20 21:17:10 * @Description: file content --><h2 id="顺序图-基本语法"><a href="#顺序图-基本语法" class="headerlink" title="顺序图-基本语法"></a>顺序图-基本语法</h2><blockquote><p>序列图是一个交互图，它显示进程如何相互操作以及以什么顺序进行操作。</p></blockquote><h3 id="渲染序列图"><a href="#渲染序列图" class="headerlink" title="渲染序列图"></a>渲染序列图</h3><pre><code class="bash">sequenceDiagram    Alice-&gt;&gt;John: Hello John, how are you?    John--&gt;&gt;Alice: Great!</code></pre><pre class="mermaid">sequenceDiagram    Alice->>John: Hello John, how are you?    John-->>Alice: Great!</pre><h3 id="句法"><a href="#句法" class="headerlink" title="句法"></a>句法</h3><p>参加者<br>可以像本页第一个示例中那样隐式定义参与者。在图表源文本中按出现顺序呈现参与者或演员。有时，您可能想以不同于第一条消息出现的顺序来显示参与者。通过执行以下操作可以指定演员的出场顺序</p><pre><code class="bash">sequenceDiagram    participant John    participant Alice    Alice-&gt;&gt;John: Hello John, how are you?    John--&gt;&gt;Alice: Great!</code></pre><pre class="mermaid">sequenceDiagram    participant John    participant Alice    Alice->>John: Hello John, how are you?    John-->>Alice: Great!</pre><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>演员可以具有方便的标识符和描述性标签。</p><pre><code class="bash">sequenceDiagram    participant A as Alice    participant J as John    A-&gt;&gt;J: Hello John, how are you?    J-&gt;&gt;A: Great!</code></pre><pre class="mermaid">sequenceDiagram    participant A as Alice    participant J as John    A->>J: Hello John, how are you?    J->>A: Great!</pre><h3 id="留言内容"><a href="#留言内容" class="headerlink" title="留言内容"></a>留言内容</h3><p>消息可以是实线或虚线显示的两种。</p><pre><code class="bash">[Actor][Arrow][Actor]:Message text</code></pre><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>-&gt;</td><td>实线无箭头</td></tr><tr><td>-&gt;</td><td>虚线无箭头</td></tr><tr><td>-&gt;&gt;</td><td>带箭头的实线</td></tr><tr><td>-&gt;&gt;</td><td>带箭头的虚线</td></tr><tr><td>-X</td><td>实线，末端带有叉号（异步）</td></tr><tr><td>- X</td><td>虚线末端带有叉号（异步）</td></tr></tbody></table><h3 id="激活方式"><a href="#激活方式" class="headerlink" title="激活方式"></a>激活方式</h3><p>可以激活和停用角色。（de）激活可以是专用的声明：</p><pre><code class="bash">sequenceDiagram    Alice-&gt;&gt;John: Hello John, how are you?    activate John    John--&gt;&gt;Alice: Great!    deactivate John</code></pre><pre class="mermaid">sequenceDiagram    Alice->>John: Hello John, how are you?    activate John    John-->>Alice: Great!    deactivate John</pre><p>通过在消息箭头后面添加+/ -后缀，还有一种快捷方式标记：</p><pre><code class="bash">sequenceDiagram    Alice-&gt;&gt;+John: Hello John, how are you?    John--&gt;&gt;-Alice: Great!</code></pre><pre class="mermaid">sequenceDiagram    Alice->>+John: Hello John, how are you?    John-->>-Alice: Great!</pre><p>可以为同一演员堆叠激活：</p><pre><code class="bash">sequenceDiagram    Alice-&gt;&gt;+John: Hello John, how are you?    Alice-&gt;&gt;+John: John, can you hear me?    John--&gt;&gt;-Alice: Hi Alice, I can hear you!    John--&gt;&gt;-Alice: I feel great!</code></pre><pre class="mermaid">sequenceDiagramAlice->>+John: Hello John, how are you?Alice->>+John: John, can you hear me?John-->>-Alice: Hi Alice, I can hear you!John-->>-Alice: I feel great!</pre><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><p>可以在顺序图中添加注释。这是通过注解[[右| 左| 结束] [演员]：笔记内容中的文字</p><p>请参阅以下示例</p><pre><code class="bash">sequenceDiagram    participant John    Note right of John: Text in note</code></pre><pre class="mermaid">sequenceDiagram    participant John    Note right of John: Text in note</pre><p>也可以创建跨越两个参与者的笔记：</p><pre><code class="bash">sequenceDiagram    Alice-&gt;John: Hello John, how are you?    Note over Alice,John: A typical interaction</code></pre><pre class="mermaid">sequenceDiagram    Alice->John: Hello John, how are you?    Note over Alice,John: A typical interaction</pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><pre><code class="bash">loop Loop text... statements ...end</code></pre><p>请参阅以下示例：</p><pre><code class="bash">sequenceDiagram    Alice-&gt;John: Hello John, how are you?    loop Every minute        John--&gt;Alice: Great!    end</code></pre><pre class="mermaid">sequenceDiagramAlice->John: Hello John, how are you?loop Every minute    John-->Alice: Great!end</pre><h3 id="Alt键"><a href="#Alt键" class="headerlink" title="Alt键"></a>Alt键</h3><p>可以在顺序图中表达替代路径。这是通过符号来完成的</p><pre><code class="bash">alt Describing text... statements ...else... statements ...end</code></pre><p>或者是否有可选的序列（如果没有其他序列）。</p><pre><code class="bash">opt Describing text... statements ...end</code></pre><p>请参阅以下示例：</p><pre><code class="bash">sequenceDiagram    Alice-&gt;&gt;Bob: Hello Bob, how are you?    alt is sick        Bob-&gt;&gt;Alice: Not so good :(    else is well        Bob-&gt;&gt;Alice: Feeling fresh like a daisy    end    opt Extra response        Bob-&gt;&gt;Alice: Thanks for asking    end</code></pre><pre class="mermaid">sequenceDiagram    Alice->>Bob: Hello Bob, how are you?    alt is sick        Bob->>Alice: Not so good :(    else is well        Bob->>Alice: Feeling fresh like a daisy    end    opt Extra response        Bob->>Alice: Thanks for asking    end</pre><h3 id="背景突出显示"><a href="#背景突出显示" class="headerlink" title="背景突出显示"></a>背景突出显示</h3><p>通过提供彩色背景矩形可以突出显示流。这是通过符号来完成的</p><p>颜色是使用rgb和rgba语法定义的。</p><pre><code class="bash">rect rgb(0, 255, 0)... content ...end</code></pre><table><thead><tr><th>Class</th><th>Description</th></tr></thead><tbody><tr><td>actor</td><td>Style for the actor box at the top of the diagram.</td></tr><tr><td>text.actor</td><td>Styles for text in the actor box at the top of the diagram.</td></tr><tr><td>actor-line</td><td>The vertical line for an actor.</td></tr><tr><td>messageLine0</td><td>Styles for the solid message line.</td></tr><tr><td>messageLine1</td><td>Styles for the dotted message line.</td></tr><tr><td>messageText</td><td>Defines styles for the text on the message arrows.</td></tr><tr><td>labelBox</td><td>Defines styles label to left in a loop.</td></tr><tr><td>labelText</td><td>Styles for the text in label for loops.</td></tr><tr><td>loopText</td><td>Styles for the text in the loop box.</td></tr><tr><td>loopLine</td><td>Defines styles for the lines in the loop box.</td></tr><tr><td>note</td><td>Styles for the note box.</td></tr><tr><td>noteText</td><td>Styles for the text on in the note boxes.</td></tr></tbody></table><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;!--
 * @Author: za-wangxuezhong
 * @Date: 2019-11-17 22:19:51
 * @LastEditors: za-wangxuezhong
 * @LastEditTime: 2019-11-20 21:17:10
 * @De</summary>
      
    
    
    
    <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
    <category term="frist" scheme="http://yoursite.com/tags/frist/"/>
    
  </entry>
  
  <entry>
    <title>流程图</title>
    <link href="http://yoursite.com/2019/11/18/test/%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <id>http://yoursite.com/2019/11/18/test/%E6%B5%81%E7%A8%8B%E5%9B%BE/</id>
    <published>2019-11-17T17:19:51.000Z</published>
    <updated>2020-10-19T04:06:49.988Z</updated>
    
    <content type="html"><![CDATA[<!-- * @Author: za-wangxuezhong * @Date: 2019-11-17 22:19:51 * @LastEditors: za-wangxuezhong * @LastEditTime: 2019-11-18 01:51:43 * @Description: file content --><h2 id="流程图-基本语法"><a href="#流程图-基本语法" class="headerlink" title="流程图-基本语法"></a>流程图-基本语法</h2><h3 id="这声明了一个从上到下（TD或TB）定向的图形"><a href="#这声明了一个从上到下（TD或TB）定向的图形" class="headerlink" title="这声明了一个从上到下（TD或TB）定向的图形"></a>这声明了一个从上到下（TD或TB）定向的图形</h3><pre><code class="bash">graph TD    Start --&gt; Stop</code></pre><pre class="mermaid">graph TD    Start --> Stop</pre><h3 id="这声明了一个从左到右的图（LR）"><a href="#这声明了一个从左到右的图（LR）" class="headerlink" title="这声明了一个从左到右的图（LR）"></a>这声明了一个从左到右的图（LR）</h3><pre><code class="bash">graph LR    Start --&gt; Stop</code></pre><pre class="mermaid">graph LR    Start --> Stop</pre><ul><li>可能的方向是：</li></ul><ol><li><p>TB-顶底</p></li><li><p>BT-底部顶部</p></li><li><p>RL-右左</p></li><li><p>LR-左右</p></li><li><p>TD-与TB相同</p></li></ol><h3 id="节点和形状"><a href="#节点和形状" class="headerlink" title="节点和形状"></a>节点和形状</h3><h3 id="节点（默认）"><a href="#节点（默认）" class="headerlink" title="节点（默认）"></a>节点（默认）</h3><pre><code class="bash">graph LR    id</code></pre><pre class="mermaid">graph LR    id</pre><p>请注意，id是框中显示的ID。</p><h3 id="带有文本的节点"><a href="#带有文本的节点" class="headerlink" title="带有文本的节点"></a>带有文本的节点</h3><pre><code class="bash">graph LR    id1[This is the text in the box]</code></pre><pre class="mermaid">graph LR    id1[This is the text in the box]</pre><p>也可以在不同于ID的框中设置文本。如果多次执行此操作，则这是将要使用的节点的最后一个文本。同样，如果稍后定义节点的边缘，则可以省略文本定义。渲染框时将使用先前定义的那个。</p><h3 id="具有圆边的节点"><a href="#具有圆边的节点" class="headerlink" title="具有圆边的节点"></a>具有圆边的节点</h3><pre><code class="bash">graph LR    id1(This is the text in the box)</code></pre><pre class="mermaid">graph LR    id1(This is the text in the box)</pre><h3 id="圆形式的节点"><a href="#圆形式的节点" class="headerlink" title="圆形式的节点"></a>圆形式的节点</h3><pre><code class="bash">graph LR    id1((This is the text in the circle))</code></pre><pre class="mermaid">graph LR    id1((This is the text in the circle))</pre><h3 id="非对称形状的节点"><a href="#非对称形状的节点" class="headerlink" title="非对称形状的节点"></a>非对称形状的节点</h3><pre><code class="bash">graph LR    id1&gt;This is the text in the box]</code></pre><pre class="mermaid">graph LR    id1>This is the text in the box]</pre><p>当前，只有上面的形状是可能的，而不是它的镜子。这可能会随着将来的版本而改变。</p><h3 id="一个节点（菱形）"><a href="#一个节点（菱形）" class="headerlink" title="一个节点（菱形）"></a>一个节点（菱形）</h3><pre><code class="bash">graph LR    id1{This is the text in the box}</code></pre><pre class="mermaid">graph LR    id1{This is the text in the box}</pre><h3 id="梯形"><a href="#梯形" class="headerlink" title="梯形"></a>梯形</h3><pre><code class="bash">graph TD    A[/Christmas\]</code></pre><pre class="mermaid">graph TD    A[/Christmas\]</pre><h3 id="梯形alt"><a href="#梯形alt" class="headerlink" title="梯形alt"></a>梯形alt</h3><pre><code class="bash">graph TD    B[\Go shopping/]</code></pre><pre class="mermaid">graph TD    B[\Go shopping/]</pre><h3 id="节点之间的链接"><a href="#节点之间的链接" class="headerlink" title="节点之间的链接"></a>节点之间的链接</h3><p>节点可以通过链接/边缘连接。可以具有不同类型的链接，也可以将文本字符串附加到链接。</p><h3 id="箭头链接"><a href="#箭头链接" class="headerlink" title="箭头链接"></a>箭头链接</h3><pre><code class="bash">graph LR    A--&gt;B</code></pre><pre class="mermaid">graph LR    A-->B</pre><h3 id="一个开放的链接"><a href="#一个开放的链接" class="headerlink" title="一个开放的链接"></a>一个开放的链接</h3><pre><code class="bash">graph LR    A --- B</code></pre><pre class="mermaid">graph LR    A --- B</pre><h3 id="链接上的文字"><a href="#链接上的文字" class="headerlink" title="链接上的文字"></a>链接上的文字</h3><pre><code class="bash">graph LR    A-- This is the text ---B</code></pre><pre class="mermaid">graph LR    A-- This is the text ---B</pre><p>或者</p><pre><code class="bash">graph LR    A---|This is the text|B</code></pre><h3 id="带有箭头和文字的链接"><a href="#带有箭头和文字的链接" class="headerlink" title="带有箭头和文字的链接"></a>带有箭头和文字的链接</h3><pre><code class="bash">graph LR    A--&gt;|text|B</code></pre><pre class="mermaid">graph LR    A-->|text|B</pre><p>或者</p><pre><code class="base">graph LR    A-- text --&gt;B</code></pre><h3 id="虚线链接"><a href="#虚线链接" class="headerlink" title="虚线链接"></a>虚线链接</h3><pre><code class="bash">graph LR;   A-.-&gt;B;</code></pre><pre class="mermaid">graph LR;   A-.->B;</pre><h3 id="带文字的虚线链接"><a href="#带文字的虚线链接" class="headerlink" title="带文字的虚线链接"></a>带文字的虚线链接</h3><pre><code class="bash">graph LR   A-. text .-&gt; B</code></pre><pre class="mermaid">graph LR   A-. text .-> B</pre><h3 id="粗链接"><a href="#粗链接" class="headerlink" title="粗链接"></a>粗链接</h3><pre><code class="bash">graph LR   A ==&gt; B</code></pre><pre class="mermaid">graph LR   A ==> B</pre><h3 id="带有文字的粗链接"><a href="#带有文字的粗链接" class="headerlink" title="带有文字的粗链接"></a>带有文字的粗链接</h3><pre><code class="bash">graph LR   A == text ==&gt; B</code></pre><pre class="mermaid">graph LR   A == text ==> B</pre><h3 id="链接链接"><a href="#链接链接" class="headerlink" title="链接链接"></a>链接链接</h3><p>可以按如下所示在同一行中声明许多链接：</p><pre><code class="bash">graph LR   A -- text --&gt; B -- text2 --&gt; C</code></pre><pre class="mermaid">graph LR   A -- text --> B -- text2 --> C</pre><h3 id="破坏语法的特殊字符"><a href="#破坏语法的特殊字符" class="headerlink" title="破坏语法的特殊字符"></a>破坏语法的特殊字符</h3><pre><code class="bash">graph LR    id1[&quot;This is the (text) in the box&quot;]</code></pre><pre class="mermaid">graph LR    id1["This is the (text) in the box"]</pre><h3 id="实体代码以转义字符"><a href="#实体代码以转义字符" class="headerlink" title="实体代码以转义字符"></a>实体代码以转义字符</h3><pre><code class="bash">graph LR    A[&quot;A double quote:#quot;&quot;] --&gt;B[&quot;A dec char:#9829;&quot;]</code></pre><pre class="mermaid">graph LR    A["A double quote:#quot;"] -->B["A dec char:#9829;"]</pre><h3 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h3><pre><code class="bash">subgraph title    graph definitionend</code></pre><h3 id="子图案例"><a href="#子图案例" class="headerlink" title="子图案例"></a>子图案例</h3><pre><code class="bash">graph TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end</code></pre><pre class="mermaid">graph TB    c1-->a2    subgraph one    a1-->a2    end    subgraph two    b1-->b2    end    subgraph three    c1-->c2    end</pre><h3 id="相互作用"><a href="#相互作用" class="headerlink" title="相互作用"></a>相互作用</h3><p>可以将click事件绑定到节点，单击可能导致JavaScript回调或链接，该链接将在新的浏览器选项卡中打开。注意：使用securityLevel=’strict’时将禁用此功能，使用时将启用securityLevel=’loose’。</p><pre><code class="bash">click nodeId callback</code></pre><ul><li>nodeId是节点的ID</li><li>callback是在显示图形的页面上定义的javascript函数的名称，该函数将使用nodeId作为参数来调用。<br>以下是工具提示用法的示例：</li></ul><pre><code class="bash">&lt;script&gt;    var callback = function(){        alert(&#39;A callback was triggered&#39;);    }&lt;script&gt;</code></pre><p>工具提示文本用双引号引起来。工具提示的样式由.mermaidTooltip类设置。</p><pre class="mermaid">graph LR;    A-->B;    click A callback "Tooltip for a callback"    click B "http://www.github.com" "This is a tooltip for a link"</pre><pre><code class="bash">graph LR;    A--&gt;B;    click A callback &quot;Tooltip for a callback&quot;    click B &quot;http://www.github.com&quot; &quot;This is a tooltip for a link&quot;</code></pre><h3 id="样式节点链接"><a href="#样式节点链接" class="headerlink" title="样式节点链接"></a>样式节点链接</h3><h3 id="样式链接"><a href="#样式链接" class="headerlink" title="样式链接"></a>样式链接</h3><p>可以设置链接样式。例如，您可能想要设置在流程中向后移动的链接的样式。由于链接没有ID的方式与节点相同，因此需要某种其他方式来确定链接应附加到的样式。在图表中定义链接时使用的订单号代替id。在下面的示例中，linkStyle语句中定义的样式将属于图中的第四个链接：</p><pre><code class="bash">linkStyle 3 stroke:#ff3,stroke-width:4px;</code></pre><h3 id="设置节点样式"><a href="#设置节点样式" class="headerlink" title="设置节点样式"></a>设置节点样式</h3><p>可以将特定样式（例如，较粗的边框或不同的背景颜色）应用于节点。</p><pre><code class="bash">graph LR    id1(Start)--&gt;id2(Stop)    style id1 fill:#f9f,stroke:#333,stroke-width:4px    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5</code></pre><pre class="mermaid">graph LR    id1(Start)-->id2(Stop)    style id1 fill:#f9f,stroke:#333,stroke-width:4px    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5</pre><h3 id="班级"><a href="#班级" class="headerlink" title="班级"></a>班级</h3><p>每次定义样式时，更方便的方法是定义一类样式，并将该类附加到应具有不同外观的节点上。</p><p>类定义如下例所示：</p><pre><code class="bash">classDef className fill:#f9f,stroke:#333,stroke-width:4px;</code></pre><p>将类附加到节点的操作如下:</p><pre><code class="bash">class nodeId1 className;</code></pre><p>也可以在一个语句中将类附加到节点列表：</p><pre><code class="bash">class nodeId1,nodeId2 className;</code></pre><h3 id="CSS类"><a href="#CSS类" class="headerlink" title="CSS类"></a>CSS类</h3><p>也可以以css样式预定义可从图形定义中应用的类，如下例所示：</p><p>示例样式:</p><pre><code class="bash">&lt;style&gt;    .cssClass &gt; rect{        fill:#FF0000;        stroke:#FFFF00;        stroke-width:4px;    }&lt;/style&gt;</code></pre><p>示例定义:</p><pre><code class="bash">graph LR;    A--&gt;B[AAA&lt;span&gt;BBB&lt;/span&gt;];    B--&gt;D;    class A cssClass;</code></pre><pre class="mermaid">graph LR;    A-->B[AAA<span>BBB</span>];    B-->D;    class A cssClass;</pre><h3 id="默认类"><a href="#默认类" class="headerlink" title="默认类"></a>默认类</h3><p>如果一个类被命名为default，它将被分配给所有没有特定类定义的类。</p><pre><code class="bash">classDef default fill:#f9f,stroke:#333,stroke-width:4px;</code></pre><h3 id="基本支持fontawesome"><a href="#基本支持fontawesome" class="headerlink" title="基本支持fontawesome"></a>基本支持fontawesome</h3><p>可以从fontawesome添加图标。</p><p>通过语法fa：#icon类名＃来访问图标。</p><pre><code class="bash">graph TD    B[&quot;fa:fa-twitter for peace&quot;]    B--&gt;C[fa:fa-ban forbidden]    B--&gt;D(fa:fa-spinner);    B--&gt;E(A fa:fa-camera-retro perhaps?);</code></pre><pre class="mermaid">graph TD    B["fa:fa-twitter for peace"]    B-->C[fa:fa-ban forbidden]    B-->D(fa:fa-spinner);    B-->E(A fa:fa-camera-retro perhaps?);</pre><h3 id="图的声明在顶点和链接之间有空格，并且没有分号"><a href="#图的声明在顶点和链接之间有空格，并且没有分号" class="headerlink" title="图的声明在顶点和链接之间有空格，并且没有分号"></a>图的声明在顶点和链接之间有空格，并且没有分号</h3><ul><li><p>在图形声明中，语句现在也可以不使用分号结束。在0.2.16版本之后，以分号结束图语句只是可选的。因此，下面的图声明与图的旧声明同样有效。</p></li><li><p>顶点和链接之间只能有一个空格。但是，顶点和其文本以及链接和其文本之间不应有任何空格。图形声明的旧语法也将起作用，因此，此新功能是可选的，旨在提高可读性。</p></li></ul><p>以下是图边缘的新声明，该声明与图边缘的旧声明同样有效。</p><pre><code class="bash">graph LR    A[Hard edge] --&gt;|Link text| B(Round edge)    B --&gt; C{Decision}    C --&gt;|One| D[Result one]    C --&gt;|Two| E[Result two]</code></pre><pre class="mermaid">graph LR    A[Hard edge] -->|Link text| B(Round edge)    B --> C{Decision}    C -->|One| D[Result one]    C -->|Two| E[Result two]</pre><h3 id="组态"><a href="#组态" class="headerlink" title="组态"></a>组态</h3><p>是否可以调整渲染流程图的宽度。</p><p>这是通过定义mermaid.flowchartConfig或通过CLI在配置中使用json文件来完成的。mermaidCLI页面中描述了如何使用CLI。可以将mermaid.flowchartConfig设置为带有配置参数或相应对象的JSON字符串。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;!--
 * @Author: za-wangxuezhong
 * @Date: 2019-11-17 22:19:51
 * @LastEditors: za-wangxuezhong
 * @LastEditTime: 2019-11-18 01:51:43
 * @De</summary>
      
    
    
    
    <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
    <category term="frist" scheme="http://yoursite.com/tags/frist/"/>
    
  </entry>
  
  <entry>
    <title>图表示例代码</title>
    <link href="http://yoursite.com/2019/11/18/test/%E5%9B%BE%E8%A1%A8%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2019/11/18/test/%E5%9B%BE%E8%A1%A8%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/</id>
    <published>2019-11-17T16:19:51.000Z</published>
    <updated>2020-10-19T04:06:49.988Z</updated>
    
    <content type="html"><![CDATA[<!-- * @Author: za-wangxuezhong * @Date: 2019-11-19 18:01:29 * @LastEditors: za-wangxuezhong * @LastEditTime: 2019-11-20 11:08:38 * @Description: file content --><h2 id="简单图表"><a href="#简单图表" class="headerlink" title="简单图表"></a>简单图表</h2><h3 id="简易流程图"><a href="#简易流程图" class="headerlink" title="简易流程图"></a>简易流程图</h3><pre class="mermaid">graph TD;    A-->B;    A-->C;    B-->D;    C-->D;</pre><pre><code class="base">graph TD;    A--&gt;B;    A--&gt;C;    B--&gt;D;    C--&gt;D;</code></pre><h3 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h3><pre class="mermaid">graph TB    c1-->a2    subgraph one    a1-->a2    end    subgraph two    b1-->b2    end    subgraph three    c1-->c2    end</pre><pre><code class="base">graph TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end</code></pre><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><pre class="mermaid">sequenceDiagram    participant Alice    participant Bob    Alice->>John: Hello John, how are you?    loop Healthcheck        John->>John: Fight against hypochondria    end    Note right of John: Rational thoughts <br/>prevail!    John-->>Alice: Great!    John->>Bob: How about you?    Bob-->>John: Jolly good!</pre><pre><code class="base">sequenceDiagram    participant Alice    participant Bob    Alice-&gt;&gt;John: Hello John, how are you?    loop Healthcheck        John-&gt;&gt;John: Fight against hypochondria    end    Note right of John: Rational thoughts &lt;br/&gt;prevail!    John--&gt;&gt;Alice: Great!    John-&gt;&gt;Bob: How about you?    Bob--&gt;&gt;John: Jolly good!</code></pre><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><pre class="mermaid">gantt    dateFormat  YYYY-MM-DD    title Adding GANTT diagram to mermaid    excludes weekdays 2014-01-10    section A section    Completed task            :done,    des1, 2014-01-06,2014-01-08    Active task               :active,  des2, 2014-01-09, 3d    Future task               :         des3, after des2, 5d    Future task2               :         des4, after des3, 5d</pre><pre><code class="base">gantt    dateFormat  YYYY-MM-DD    title Adding GANTT diagram to mermaid    excludes weekdays 2014-01-10    section A section    Completed task            :done,    des1, 2014-01-06,2014-01-08    Active task               :active,  des2, 2014-01-09, 3d    Future task               :         des3, after des2, 5d    Future task2               :         des4, after des3, 5d</code></pre><pre class="mermaid">classDiagramClass01 <|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --> C2 : Where am i?Class09 --* C3Class09 --|> Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 <--> C2: Cool label</pre><pre><code class="base">classDiagram    Class01 &lt;|-- AveryLongClass : Cool    Class03 *-- Class04    Class05 o-- Class06    Class07 .. Class08    Class09 --&gt; C2 : Where am i?    Class09 --* C3    Class09 --|&gt; Class07    Class07 : equals()    Class07 : Object[] elementData    Class01 : size()    Class01 : int chimp    Class01 : int gorilla    Class08 &lt;--&gt; C2: Cool label</code></pre><h3 id="git图"><a href="#git图" class="headerlink" title="git图"></a>git图</h3><pre class="mermaid">gitGraph:options{    "nodeSpacing": 130,    "nodeRadius": 5}endcommitcommitbranch newbranchcheckout newbranchcommitcommitcheckout mastercommitcommitmerge newbranch</pre><pre><code class="base">gitGraph:options{    &quot;nodeSpacing&quot;: 150,    &quot;nodeRadius&quot;: 10}endcommitbranch newbranchcheckout newbranchcommitcommitcheckout mastercommitcommitmerge newbranch</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;!--
 * @Author: za-wangxuezhong
 * @Date: 2019-11-19 18:01:29
 * @LastEditors: za-wangxuezhong
 * @LastEditTime: 2019-11-20 11:08:38
 * @De</summary>
      
    
    
    
    <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
    <category term="frist" scheme="http://yoursite.com/tags/frist/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/17/test/hello-world/"/>
    <id>http://yoursite.com/2019/11/17/test/hello-world/</id>
    <published>2019-11-17T14:19:51.000Z</published>
    <updated>2020-10-19T04:06:49.987Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><!-- * @Author: za-wangxuezhong * @Date: 2019-11-17 22:19:51 * @LastEditors: za-wangxuezhong * @LastEditTime: 2019-11-18 01:56:24 * @Description: file content --><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>为什么用axios不用ajax</title>
    <link href="http://yoursite.com/2019/11/17/test/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8axios%E4%B8%8D%E7%94%A8ajax/"/>
    <id>http://yoursite.com/2019/11/17/test/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8axios%E4%B8%8D%E7%94%A8ajax/</id>
    <published>2019-11-17T14:19:51.000Z</published>
    <updated>2020-10-19T04:06:49.987Z</updated>
    
    <content type="html"><![CDATA[<!-- * @Author: za-wangxuezhong * @Date: 2019-11-17 22:19:51 * @LastEditors: za-wangxuezhong * @LastEditTime: 2019-11-26 16:08:03 * @Description: file content --><h2 id="为什么用axios不用ajax"><a href="#为什么用axios不用ajax" class="headerlink" title="为什么用axios不用ajax"></a>为什么用axios不用ajax</h2><h3 id="区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios"><a href="#区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios" class="headerlink" title="区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios"></a>区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios</h3><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><ol><li><p>本身是针对MVC编程，不符合前端MVVM的浪潮</p></li><li><p>基于原生XHR开发，XHR本身的架构不清晰，已经有了fetch的替代方案，jquery整个项目太大，单纯使用ajax却要引入整个jquery非常不合理（采取个性化打包方案又不能享受cdn服务）</p></li><li><p>ajax不支持浏览器的back按钮</p></li><li><p>安全问题ajax暴露了与服务器交互的细节</p></li><li><p>对搜索引擎的支持比较弱</p></li><li><p>破坏程序的异常机制</p></li><li><p>不容易调试</p></li></ol><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><ol><li><p>从node.js创建http请求</p></li><li><p>支持Promise API</p></li><li><p>客户端防止CSRF（网站恶意利用）</p></li><li><p>提供了一些并发请求的接口</p></li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;!--
 * @Author: za-wangxuezhong
 * @Date: 2019-11-17 22:19:51
 * @LastEditors: za-wangxuezhong
 * @LastEditTime: 2019-11-26 16:08:03
 * @De</summary>
      
    
    
    
    
  </entry>
  
</feed>
